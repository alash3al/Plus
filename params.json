{"name":"Plus","tagline":"Asynchronous I/O environment in pure PHP","body":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <!-- basic meta -->\r\n        <meta charset=\"UTF-8\" />\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n        <meta name=\"description\" content=\"Asynchronous PHP I/O, in another words its micro nodejs implementation in pure PHP\" />\r\n        <meta name=\"author\" content=\"Mohammed Al Ashaal\" />\r\n\r\n        <title>Horus Plus, asynchronous I/O and network programming in pure PHP</title>\r\n\r\n        <!-- CSS -->\r\n        <link href=\"//maxcdn.bootstrapcdn.com/bootswatch/3.3.0/cosmo/bootstrap.min.css\" rel=\"stylesheet\" />\r\n        <link href=\"//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.css\" rel=\"stylesheet\" />\r\n        <link href=\"//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css\" rel=\"stylesheet\" />\r\n\r\n        <!-- favicon -->\r\n        <link href=\"https://scontent-a-mad.xx.fbcdn.net/hphotos-xap1/v/t1.0-9/10500339_421029108048154_5740342647673073365_n.jpg?oh=0166931f250910c2abdbdc602202ac09&oe=54FD00C1\" rel=\"shortcut icon\" />\r\n\r\n        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->\r\n        <!--[if lt IE 9]>\r\n          <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\r\n          <script src=\"https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js\"></script>\r\n        <![endif]-->\r\n\r\n        <style>\r\n            body\r\n            {\r\n                padding-bottom: 30px;\r\n            }\r\n        </style>\r\n\r\n    </head>\r\n\r\n    <body>\r\n\r\n        <nav class=\"navbar navbar-default navbar-fixed-bottom one-page-nav\" role=\"navigation\">\r\n            <div class=\"container\">\r\n                <div class=\"navbar-header\">\r\n                    <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-ex1-collapse\">\r\n                        <span class=\"sr-only\">Toggle navigation</span>\r\n                        <span class=\"icon-bar\"></span>\r\n                        <span class=\"icon-bar\"></span>\r\n                        <span class=\"icon-bar\"></span>\r\n                    </button>\r\n                    <a class=\"navbar-brand\" href=\"#intro\"><span class=\"glyphicon glyphicon-fire\"></span> Horus Framework</a>\r\n                </div>\r\n\r\n                <!-- Collect the nav links, forms, and other content for toggling -->\r\n                <div class=\"collapse navbar-collapse navbar-ex1-collapse\">\r\n                    <ul class=\"nav navbar-nav\">\r\n                        <li class=\"dropdown\">\r\n                            <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\"><span class=\"fa fa-key\"></span> Choose API <span class=\"caret\"></span></a>\r\n                            <ul class=\"dropdown-menu\" role=\"menu\">\r\n                                <li><a href=\"#prototype\">&rsaquo; Prototype</a></li>\r\n                                <li><a href=\"#events\">&rsaquo; EventEmitter</a></li>\r\n                                <li><a href=\"#console\">&rsaquo; Console</a></li>\r\n                                <li><a href=\"#timers\">&rsaquo; Timers</a></li>\r\n                                <li><a href=\"#ioloop\">&rsaquo; IOLoop</a></li>\r\n                                <li><a href=\"#iostream\">&rsaquo; IOStream</a></li>\r\n                                <li><a href=\"#ioclient\">&rsaquo; IOClient</a></li>\r\n                                <li><a href=\"#ioserver\">&rsaquo; IOServer</a></li>\r\n                                <li><a href=\"#frame\">&rsaquo; Frame</a></li>\r\n                            </ul>\r\n                        </li>\r\n                        <li class=\"dropdown\">\r\n                            <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\"><span class=\"fa fa-link\"></span> Links <span class=\"caret\"></span></a>\r\n                            <ul class=\"dropdown-menu\" role=\"menu\">\r\n                                <li><a target=\"_blank\" href=\"//github.com/alash3al/Horus\">&rsaquo; Horus (Micro), Github</a></li>\r\n                                <li><a target=\"_blank\" href=\"//facebook.com/horus.framework\">&rsaquo; Horus, Facebook</a></li>\r\n                                <li><a target=\"_blank\" href=\"//fb.me/alash3al\">&rsaquo; Maintainer</a></li>\r\n                            </ul>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <!-- /.navbar-collapse -->\r\n            </div>\r\n            <!-- /.container -->\r\n        </nav>\r\n\r\n        <div class=\"container\" style=\"padding-bottom: 90px; max-width: 700px;\">\r\n\r\n            <!-- Logo -->\r\n            <div class=\"row text-center center-block\" style=\"margin-top: 20px;\">\r\n                <div class=\"text-center center-block\">\r\n                    <img class=\"img-responsive img-thumbnail\" src=\"https://scontent-b-mad.xx.fbcdn.net/hphotos-xfa1/v/t1.0-9/1507110_421028611381537_23004464390051550_n.png?oh=d3363456912d121175a7e3441e89cee7&oe=55174FBE\" />\r\n                </div>\r\n                <br />                \r\n                <div class=\"text-center center-block\">\r\n                    <span><iframe src=\"http://ghbtns.com/github-btn.html?user=alash3al&repo=Plus&type=watch&count=true\" height=\"30\" width=\"118\" frameborder=\"0\" scrolling=\"0\" style=\"width:118px; height: 30px;\" allowTransparency=\"true\"></iframe></span>\r\n                    <span><iframe src=\"http://ghbtns.com/github-btn.html?user=alash3al&repo=Plus&type=fork&count=true\" height=\"30\" width=\"118\" frameborder=\"0\" scrolling=\"0\" style=\"width:118px; height: 30px;\" allowTransparency=\"true\"></iframe></span>\r\n                    <span><iframe src=\"http://ghbtns.com/github-btn.html?user=alash3al&type=follow&count=true\" height=\"30\" width=\"168\" frameborder=\"0\" scrolling=\"0\" style=\"width:168px; height: 30px;\" allowTransparency=\"true\"></iframe></span>\r\n                </div>\r\n            </div>\r\n           <!-- End Logo --> \r\n\r\n            <hr />\r\n\r\n            <!-- BODY -->\r\n            <div class=\"center-block\">\r\n\r\n                <h1 class=\"center-block text-center text-muted\"><span class=\"fa fa-fire\"></span> Welcome to Plus environment</h1>\r\n\r\n                <blockquote class=\"well\">\r\n                    <strong>Plus</strong> is just an asynchronous event-loop for handling I/O events &amp; network sockets in pure PHP,\r\n                    You can now compare <code>PHP vs NodeJS</code> . <br />\r\n                    In another words it is the micro implementation of nodejs in pure php .\r\n                </blockquote>\r\n                <br />\r\n\r\n<pre class=\"language-php\"><code>\r\n    // a very simple HTTP server in Plus environment\r\n\r\n    include \"Plus.php\";\r\n\r\n    use Plus\\Frame;\r\n\r\n    $app    =   new Frame;\r\n    $server =   $app->ioserver();\r\n\r\n    $server->on(\"connection\", function($client){\r\n        $client->on('data', function($data) use($client) {\r\n            $client->write(\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html;\\r\\nServer: Plus/1.0\\r\\n\\r\\n<h1>Hello</h1></h1>\");\r\n        });\r\n        $client->on(\"drain\", function($client){\r\n            $client->close();\r\n        });\r\n        $client->on('error', function($e, $client){\r\n            $client->close();\r\n        });\r\n    });\r\n\r\n    $server->listen(8080);\r\n    $app->run();\r\n</code></pre>\r\n\r\n                <div id=\"prototype\">\r\n                    <h1><span class=\"fa fa-bookmark\"></span> Prototype</h1>\r\n                    <p class=\"well\">\r\n                        Prototype is a class that extends PHP's <a target=\"\" href=\"http://php.net/manual/en/class.arrayobject.php\">ArrayObject</a>\r\n                        and adds some features to it, lets see examples:\r\n                    </p>\r\n<pre class=\"language-php\"><code>\r\n    require \"Plus.php\";\r\n\r\n    use Plus\\Prototype;\r\n\r\n    // lets use it as a container for our vars\r\n    $my = new Prototype;\r\n\r\n    // assign a value to a var\r\n    $my->key1 = \"value1\";\r\n\r\n    // array style\r\n    $my['key2'] = \"value2\";\r\n\r\n    // a closure\r\n    $my->func = function(){\r\n        print \"func\";\r\n    };\r\n\r\n    // call the closure\r\n    $my->func();\r\n\r\n    // or\r\n    $my['func']();\r\n\r\n    // nested, 'without getting errors'\r\n    $my->x->y->z = \"Wow\";\r\n    $my->x->y->z->a->b->c->d = array();\r\n\r\n    // export ?\r\n    $my->toArray();\r\n\r\n    // import ?\r\n    $my->import(array(/*...*/));\r\n\r\n    // you can do anything could ArrayObject do\r\n\r\n    // lets create a class that extends it\r\n    Class Wow extends Prototype{}\r\n    \r\n    // start it\r\n    $wow = new Wow(array(\r\n        /*\r\n            optional param to import array/object into the wow scope\r\n        */\r\n    ));\r\n\r\n    // get wow instance ?\r\n    Wow::instance();\r\n\r\n    // and so ...\r\n    $wow->x = \"v\";\r\n</code></pre>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                <div id=\"events\">\r\n                    <h1><span class=\"fa fa-bookmark\"></span> EventEmitter</h1>\r\n                    <p class=\"well\">\r\n                        A class that helps you create an event-driven apps, it is inspired by javascript EventEmitter, it also extends\r\n                        the <a href=\"#prototype\">Prototype</a> Class\r\n                    </p>\r\n<pre class=\"language-php\"><code>\r\n    require \"Plus.php\";\r\n\r\n    use Plus\\EventEmitter;\r\n\r\n    // construct\r\n    $e = new EventEmitter;\r\n\r\n    // register a new listener\r\n    $e->addListener('event.1', $l1 = function(){\r\n        print \"listener.1\";\r\n    });\r\n\r\n    // you can also use this alias\r\n    $e->on('event.1', function(){\r\n        print \"listener.2\";\r\n    });\r\n\r\n    // you can cancel the next listeners in the event queue\r\n    // just like javascript\r\n    $e->on('event.1', $l2 = function(){\r\n        print \"will cancel next\";\r\n        return false; //> this is the solution\r\n    });\r\n\r\n    // to register a one-time listener\r\n    // there is an argument called $once\r\n    // the third argument will be true\r\n    $e->on('event.1', function(){\r\n        print \"listener.3 only-once\";\r\n    }, true);\r\n\r\n    // or use this\r\n    $e->once('event.1', $l3 = function(){\r\n        print \"listener.4 only-once\";\r\n    });\r\n\r\n    // to emit the event.1 listeners\r\n    $e->emit('event.1');\r\n\r\n    // you can also pass arguments\r\n    // as the second the argument\r\n    $e->emit('event.1', \"arg1\");\r\n    $e->emit('event.1', array(\"arg1\", \"arg2\"));\r\n\r\n    // an example for filters\r\n    $test = \"text\";\r\n\r\n    $e->on('event.2', $l4 = function($text, $last_return){\r\n        // last return is a param that has the value\r\n        // of the last executed listener !\r\n        return \"<b>{$text}</b>\";\r\n    });\r\n\r\n    // arg1: the event-name\r\n    // arg2: the param to pass to the listeners\r\n    // arg3: the default value to return if it were empty\r\n    $text = $e->emit('event.2', $text, $text);\r\n\r\n    // remove a registered listener from an event\r\n    $e->removeListener('event.1', $l1);\r\n\r\n    // remove all event-listener\r\n    $e->removeAllListeners('event.1');\r\n\r\n    // remove all listeners for all events\r\n    $e->removeAllListeners();\r\n\r\n    // set the maximum listeners per event\r\n    // default = 0 \"unlimited\"\r\n    // we will set to \"10\"\r\n    $e->setMaxListeners(10);\r\n\r\n    // get events listeners array\r\n    $e->listeners();\r\n\r\n    // get count of listeners in an event\r\n    $e->listenerCount('event.1');\r\n</code></pre>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                <div id=\"console\">\r\n                    <h1><span class=\"fa fa-bookmark\"></span> Console</h1>\r\n                    <p class=\"well\">\r\n                        A class that helps you writing and reading from the console window\r\n                    </p>\r\n<pre class=\"language-php\"><code>\r\n    require \"Plus.php\";\r\n\r\n    use Plus\\Console;;\r\n\r\n    // print to the stdout\r\n    Console::log(\"hello world\");\r\n    Console::log(\"hello, %s, %s\", array(\"world\", \"plus\"));\r\n\r\n    // this is just an alias of Console::log()\r\n    Console::error(\"hello error\");\r\n\r\n    // a python style\r\n    $name = Console::input(\"what is your name, %s ?\", \"please\");\r\n    Console::log(\"Your name is: %s\", $name);\r\n</code></pre>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                <div id=\"timers\">\r\n                    <h1><span class=\"fa fa-bookmark\"></span> Timers</h1>\r\n                    <p class=\"well\">\r\n                        A pure php timers class, it extends <a href=\"#prototype\">Prototype</a> class .\r\n                    </p>\r\n<pre class=\"language-php\"><code>\r\n    require \"Plus.php\";\r\n\r\n    use Plus\\Timers;;\r\n\r\n    $timers = new Timers;\r\n\r\n    // execute the callback each 5 seconds\r\n    // the timer object is passed as the argument\r\n    // also it returns the timer object .\r\n    $timer = $timers->setInterval(function($timer){\r\n        // your code here\r\n    }, 5);\r\n\r\n    // remove the timer\r\n    $timers->clearIntervals($timer);\r\n\r\n    // register a one time callback to be executed after 5 seconds\r\n    // also it returns the timer object and return it .\r\n    $timer2 = $timers->setTimeout(function($timer){\r\n        // your code here\r\n    }, 5);\r\n\r\n    // remove it\r\n    $timers->clearTimeouts($timer2);\r\n\r\n    // run the timers tick ?\r\n    $timers->tick();\r\n</code></pre>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                <div id=\"ioloop\">\r\n                    <h1><span class=\"fa fa-bookmark\"></span> IOLoop</h1>\r\n                    <p class=\"well\">\r\n                        An asynchronous I/O event-loop library, it extends <a href=\"timers\">Timers</a> class .\r\n                        This library will use <code>libevent</code> extension if it exists, else it will use the <code>stream_select()</code> function .\r\n                    </p>\r\n<pre class=\"language-php\"><code>\r\n    require \"Plus.php\";\r\n\r\n    use Plus\\IOLoop;;\r\n\r\n    $loop = new IOLoop;\r\n\r\n    // register a new stream\r\n    // here we will watch the STDIN for read events\r\n    $loop->add(STDIN, IOLoop::READ, function($stream, $loop){\r\n        // this is the stream handler\r\n        // when the STDIN changes\r\n        // $stream: holds the stream resource \"STDIN\"\r\n        // $loop: the loop object\r\n    });\r\n\r\n    // register a stream that we will watch for writes\r\n    $loop->add(STDOUT, IOLoop::WRITE, function($stream, $loop){ /* ... */ });\r\n\r\n    // remove a stream from read events ?\r\n    $loop->remove(STDIN, IOLoop::READ);\r\n\r\n    // or remove a stream from all events\r\n    $loop->remove(STDIN);\r\n\r\n    // stop the loop\r\n    $loop->stop();\r\n\r\n    // watch the registered streams \"once\"\r\n    $timeout = 5; // used in stream_select()\r\n    $loop->watch($timeout);\r\n\r\n    // infinity loop\r\n    $timeout = 5; // used in stream_select() $timeout param\r\n    $delay = 5000; // used in usleep as an idle for the loop\r\n    $loop->run($timeout, $delay);\r\n</code></pre>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                <div id=\"iostream\">\r\n                    <h1><span class=\"fa fa-bookmark\"></span> IOStream</h1>\r\n                    <p class=\"well\">\r\n                        A library that based on <a href=\"#events\">EventEmitter</a> and holds the streams you want automatically in the specified ioloop .\r\n                    </p>\r\n<pre class=\"language-php\"><code>\r\n    require \"Plus.php\";\r\n\r\n    use Plus\\IOLoop;\r\n    use Plus\\IOStream;\r\n\r\n    // start the main loop\r\n    $loop = new IOLoop;\r\n\r\n    // create an asynchronous READABLE file\r\n    $file = new IOStream($loop, fopen(\"file.ext\", \"r\"), IOStream::READABLE);\r\n\r\n    //> Stream types: \"Constants\"\r\n    // IOStream::READABLE   ->  for creating a read-only stream .\r\n    // IOStream::WRITEABLE  ->  for creating a write-only stream .\r\n    // IOStream::DUPLEX     ->  for creating a read/write stream .\r\n\r\n    //> Properties\r\n    //{\r\n        // the stream resource\r\n        $file->stream;\r\n    \r\n        // the maximum buffer-size used while reading\r\n        // default 4096\r\n        $file->bufferSize;\r\n    \r\n        // the callback used in reading\r\n        // default fread\r\n        $file->reader;\r\n    \r\n        // the callback used in writing\r\n        // default is fwrite\r\n        $file->writer;\r\n    //}\r\n\r\n    //> Events\r\n    /*{\r\n         \"error\"       when there is aan error, args [$errstr, IOStream]\r\n         \"data\"        when there is any data available, args[$data, IOStream]\r\n         \"end\"         when the stream reaches end of data being read from readable stream, args [IOStream]\r\n         \"flush\"       when the data is being flushed, args [$data, IOStream]\r\n         \"drain\"       when the stream data is drained, args [IOStream]\r\n         \"close\"       when the stream is being closed, args [IOStream]\r\n    }*/\r\n\r\n    //> methods\r\n    //{\r\n        // check if the current stream is readable\r\n        $file->isReadable(); //> true\r\n    \r\n        // check whether the stream is writable\r\n        $file->isWritable(); //> false\r\n    \r\n        // check whether the stream is duplex\r\n        $file->isDuplex(); //> false\r\n    \r\n        // remove the stream [if it were readable]\r\n        // from the ioloop read-events\r\n        $file->pause(); //> return $this\r\n    \r\n        // resume the stream [if it were readable]\r\n        // into the ioloop read-events\r\n        $file->resume(); //> return $this\r\n    \r\n        // pipe the current stream to another\r\n        // this will copy the file data to the STDOUT \"asynchronous\"\r\n        $out = new IOStream($loop, STDOUT, IOStream::WRITABLE);\r\n        $file->pipe($out)->on('end', function($file) use($out) {\r\n            $file->close();\r\n        }); //> return $this\r\n    \r\n        // unpipe or import data from another stream [only if the stream is writable]\r\n        // $file->unpipe($src);\r\n        // but our stream is read-only\r\n    \r\n        // check whether the stream is closed\r\n        $file->closed();\r\n    //}\r\n\r\n    // infinity loop\r\n    $timeout = 5; // used in stream_select() $timeout param\r\n    $delay = 5000; // used in usleep as an idle for the loop\r\n    $loop->run($timeout, $delay);\r\n</code></pre>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                <div id=\"ioclient\">\r\n                    <h1><span class=\"fa fa-bookmark\"></span> IOClient</h1>\r\n                    <p class=\"well\">\r\n                        A class that based on <a href=\"#iostream\">IOStream</a> but for asynchronous socket clients programming\r\n                    </p>\r\n<pre class=\"language-php\"><code>\r\n    require \"Plus.php\";\r\n\r\n    use Plus\\IOLoop;\r\n    use Plus\\IOClient;\r\n\r\n    // start the main loop\r\n    $loop = new IOLoop;\r\n\r\n    // create an asynchronous READABLE/WRITABLE stream\r\n    $php = new IOClient($loop, IOClient::DUPLEX);\r\n\r\n    //> Stream types: \"Constants\"\r\n    // IOClient::READABLE   ->  for creating a read-only stream .\r\n    // IOClient::WRITEABLE  ->  for creating a write-only stream .\r\n    // IOClient::DUPLEX     ->  for creating a read/write stream .\r\n\r\n    //> Properties [the same as IOStream]\r\n\r\n    //> Events\r\n    /*{\r\n         \"connection\"  when the connection is created successfully, args [IOClient]\r\n         \"error\"       when there is aan error, args [$errstr, IOClient]\r\n         \"data\"        when there is any data available, args[$data, IOClient]\r\n         \"end\"         when the stream reaches end of data being read from readable stream, args [IOClient]\r\n         \"flush\"       when the data is being flushed, args [$data, IOClient]\r\n         \"drain\"       when the stream data is drained, args [IOClient]\r\n         \"close\"       when the stream is being closed, args [IOClient]\r\n    }*/\r\n\r\n    // when the connection created, lets write some data\r\n    // only when it is available for writing\r\n    $php->on('connection', function($php){\r\n        $php->write(\"GET / HTTP/1.1\\r\\nHost: php.net\\r\\n\\r\\n\");\r\n    });\r\n\r\n    // when there is any response, write it to the stdout\r\n    $php->pipe(new IOStream($loop, STDOUT, IOStream::WRITABLE));\r\n\r\n    //> methods [thge same as IOStream] + connect($address, array $context = array())\r\n    // connect to PHP.net site\r\n    $context = array(); // any valid php stream context options\r\n    $php->connect('tcp://php.net:80');\r\n\r\n    // infinity loop\r\n    $timeout = 5; // used in stream_select() $timeout param\r\n    $delay = 5000; // used in usleep as an idle for the loop\r\n    $loop->run($timeout, $delay);\r\n</code></pre>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                <div id=\"ioserver\">\r\n                    <h1><span class=\"fa fa-bookmark\"></span> IOServer</h1>\r\n                    <p class=\"well\">\r\n                        A class that based on <a href=\"#events\">EventEmitter</a> but for asynchronous socket servers programming\r\n                    </p>\r\n<pre class=\"language-php\"><code>\r\n    require \"Plus.php\";\r\n\r\n    use Plus\\IOLoop;\r\n    use Plus\\IOServer;\r\n\r\n    // start the main loop\r\n    $loop = new IOLoop;\r\n\r\n    // create an asynchronous socket-server\r\n    $server = new IOServer($loop);\r\n\r\n    //> Events\r\n    /*{\r\n         \"listening\"   when the server starts listening for connections, args [IOServer]\r\n         \"connection\"  when the connection is created successfully, args [IOStream]\r\n         \"error\"       when there is aan error, args [$errstr, IOServer]\r\n    }*/\r\n\r\n    // lets create a simple HTTP Server\r\n    // that only prints \"Hello World\"\r\n    // $client: is an instance of IOStream\r\n    $server->on(\"connection\", function($client){\r\n        $client->on('data', function($data) use($client) {\r\n            $client->write(\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html;\\r\\nServer: Plus/1.0\\r\\n\\r\\n<h1>Hello World</h1>\");\r\n        });\r\n        $client->on(\"drain\", function($client){\r\n            $client->close();\r\n        });\r\n        $client->on('error', function($e, $client){\r\n            $client->close();\r\n        });\r\n    });\r\n\r\n    // start listening for connections\r\n    // with a context options for setting the backlog \"512\"\r\n    $server->listen(8080, array('socket' => array('backlog' => 512)));\r\n\r\n    // infinity loop\r\n    $timeout = 5; // used in stream_select() $timeout param\r\n    $delay = 5000; // used in usleep as an idle for the loop\r\n    $loop->run($timeout, $delay);\r\n</code></pre>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                <div id=\"frame\">\r\n                    <h1><span class=\"fa fa-bookmark\"></span> Frame</h1>\r\n                    <p class=\"well\">\r\n                        Just a factory for handling our main classes, it is also based on <a href=\"#ioloop\">IOLoop</a> and it will bind them to its ioloop instance .\r\n                    </p>\r\n<pre class=\"language-php\"><code>\r\n    require \"Plus.php\";\r\n\r\n    use Plus\\Frame;\r\n\r\n    $app    =   new Frame;\r\n\r\n    //> Creating a new ioserver\r\n    // $server = $app->ioserver();\r\n\r\n    //> Creating a new ioclient\r\n    // $type [IOClient::READABLE/WRITABLE/DUPLEX]\r\n    // $client = $app->ioclient($type);\r\n\r\n    //> Createing a new IOStream\r\n    // $type [IOStream::READABLE/WRITABLE/DUPLEX]\r\n    // $stream: the resource, e.g: 'STDIN'\r\n    // $client = $app->iostream($stream, $type);\r\n\r\n    //> Createing a new Prototype\r\n    // $vars = $app->prototype();\r\n\r\n    $app->run();\r\n</code></pre>\r\n                </div>\r\n\r\n\r\n                <br />\r\n\r\n                <footer class=\"center-block text-center panel panel-default\" style=\"padding: 15px;\">\r\n                    Copyright &copy; 2015 &nbsp; Plus PHP Framework, <br />\r\n                    By <a target=\"_blank\" href=\"//alash3al.github.io/Me\">Mohammed Al Ashaal</a>,<br />\r\n                </footer>\r\n\r\n            </div>\r\n            <!-- BODY -->\r\n        </div>\r\n        <!-- /.container -->\r\n\r\n        <!-- JavaScript -->\r\n        <script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\r\n        <script src=\"//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js\"></script>\r\n        <script src=\"//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js\"></script>\r\n        <script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery-one-page-nav/3.0.0/jquery.nav.min.js\"></script>\r\n        <script type=\"text/javascript\">\r\n            $(document).ready(function(){\r\n                $('[data-toggle=\"tooltip\"').tooltip();\r\n                $('.one-page-nav').onePageNav();\r\n            });\r\n        </script>\r\n    </body>\r\n</html>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}